syntax = "proto3";
import "nanopb.proto";

// wrapper for all messages
message Packet {    
  oneof content {
    // Frames with pixel data.
    Frame frame = 2;
    WFrame w_frame = 3;
    RGBFrame rgb_frame = 4;

    // From Apps/UDP to Octopus.Mixer to beak
    AudioFrame audio_frame = 5;

    // Events from the input controllers
    InputEvent input_event = 6;

    // Configures firmware, for internal use only
    FirmwareConfig firmware_config = 1; 
  }
}

// Frame with one byte per pixel and an RGB palette that defines the colors.
message Frame {
  bytes data = 1 [(nanopb).max_size = 640]; // Selects pixel colors from the palette. First pixel is top left. One panel after the other.
  bytes palette = 2 [(nanopb).max_size = 192]; // Series of RGB values. 8bit per color.
  uint32 easing_interval = 3;
}

// The same as the frame but with access to the white component in the palette (RGBW).
message WFrame {
  bytes data = 1 [(nanopb).max_size = 640]; // Selects pixel colors from the palette. First pixel is top left. One panel after the other.
  bytes palette = 2 [(nanopb).max_size = 256]; // Series of RGBW values. 8bit per color.
  uint32 easing_interval = 3;
}

// Frame with 3 bytes per pixel (RGB) and no color palette
// not yet implemented
message RGBFrame {
  bytes data = 1 [(nanopb).max_size = 1920]; // Series of RGB values. 8bit per color. First pixel is top left. One panel after the other.
  uint32 easing_interval = 2;
}

message InputEvent {
  Button button = 1;
  bool pressed = 2;
}

enum Button {
  BUTTON_1 = 0;
  BUTTON_2 = 1;
  BUTTON_3 = 2;
  BUTTON_4 = 3;
  BUTTON_5 = 4;
  BUTTON_6 = 5;
  BUTTON_7 = 6;
  BUTTON_8 = 7;
  BUTTON_9 = 8;
  BUTTON_10 = 9;

  DIRECTION_1_UP = 10;
  DIRECTION_1_DOWN = 11;
  DIRECTION_1_LEFT = 12;
  DIRECTION_1_RIGHT = 13;
  
  DIRECTION_2_UP = 14;
  DIRECTION_2_DOWN = 15;
  DIRECTION_2_LEFT = 16;
  DIRECTION_2_RIGHT = 17;
}

message FirmwareConfig {
  uint32 luminance = 1;

  EasingMode easing_mode = 2;

  bool show_test_frame = 3;
  uint32 config_phash = 4;

  bool enable_calibration = 5;
}

enum EasingMode {
  LINEAR = 0;
	EASE_IN_QUAD = 1;
	EASE_OUT_QUAD = 2;
	EASE_IN_OUT_QUAD = 3;
	EASE_IN_CUBIC = 4;
	EASE_OUT_CUBIC = 5;
	EASE_IN_OUT_CUBIC = 6;
	EASE_IN_QUART = 7;
	EASE_OUT_QUART = 8;
	EASE_IN_OUT_QUART = 9;
	EASE_IN_QUINT = 10;
	EASE_OUT_QUINT = 11;
	EASE_IN_OUT_QUINT = 12;
	EASE_IN_EXPO = 13;
	EASE_OUT_EXPO = 14;
	EASE_IN_OUT_EXPO = 15;
}


// From Firmware to Octopus, internal use only
message FirmwarePacket {
  oneof content {
    FirmwareInfo firmware_info = 1;
    RemoteLog remote_log = 2;
  }
}

message FirmwareInfo {
  string hostname = 1 [(nanopb).max_length = 20];
  string build_time = 2 [(nanopb).max_length = 20];
  uint32 panel_index = 3;
  uint32 fps = 4;
  uint32 config_phash = 5;
}

message RemoteLog {
  string message = 1 [(nanopb).max_length = 100];
}

message AudioFrame {
  string uri = 1; // supports file://<path>, http(s)://<url> with .wav or .aiff files
  uint32 channel = 2;
}
